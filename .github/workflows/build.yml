name: Build Image
on:
  workflow_call:
    inputs:
      build-arm:
        description: Build an arm64 image in addition to x64 (windows builds only build x64)
        required: false
        default: true
        type: boolean

      context:
        description: Docker Context
        required: true
        type: string

      dockerfile:
        description: Dockerfile location
        required: true
        type: string

      dotnet-tag:
        description: The dotnet tag to pass to the Dockerfile e.g. 6.0-alpine3.16-arm64v8
        required: false
        type: string

      repository:
        description: ECR repository name
        required: true
        type: string

      operating-system:
        description: What operating system is the docker image based on (e.g. linux, windows)
        default: linux
        required: false
        type: string

jobs:
  generate-matrix:
    if: inputs.operating-system == 'linux'
    name: Generate Job Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          echo "Determining hardware platforms for platform matrix values to pass to build-image job"
          MATRIX_JSON="{\"platform\": [\"x64\""
          if [[ "${{ inputs.build-arm }}" == "true" ]]; then
            MATRIX_JSON="${MATRIX_JSON},\"arm64\""
          fi
          MATRIX_JSON="${MATRIX_JSON}]}"
          echo Matrix for build-image job is $MATRIX_JSON
          echo "matrix=${MATRIX_JSON}" >> $GITHUB_OUTPUT

  build-image-linux:
    name: Build Image on Linux
    needs: generate-matrix
    if: inputs.operating-system == 'linux'
    runs-on: ${{ matrix.platform == 'arm64' && fromJSON('["self-hosted", "linux", "arm64"]') || 'ubuntu-latest' }}
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-region: us-east-1
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.BUILD_AWS_SHARED_SERVICES_ROLE }}

      - uses: aws-actions/amazon-ecr-login@v2
        id: ecr

      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: 655438670330.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.repository }}
          tags: |
            type=ref,event=branch,suffix=${{ matrix.platform == 'arm64' && '-arm' || '' }}
            type=sha,format=long,suffix=${{ matrix.platform == 'arm64' && '-arm' || '' }}
      - uses: docker/setup-buildx-action@v3

      - uses: docker/build-push-action@v5
        with:
          build-args: |
            GITHUB_TOKEN=${{ secrets.BUILD_GITHUB_TOKEN }}
            GITHUB_USERNAME=OrthoFi
            RUNTIME_TAG=${{ inputs.dotnet-tag }}
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  build-image-windows:
    name: Build Image on Windows
    if: inputs.operating-system == 'windows'
    runs-on: ["self-hosted", "windows", "x64"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Force docker to save credentials in config.json
        run: |
          Remove-Item -Path "C:\Program Files\Docker\Docker\resources\bin\docker-credential-desktop.exe" -Force -ErrorAction SilentlyContinue
          Remove-Item -Path "C:\Program Files\Docker\Docker\resources\bin\docker-credential-wincred.exe" -Force -ErrorAction SilentlyContinue
        shell: pwsh
      
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-region: us-east-1
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.BUILD_AWS_SHARED_SERVICES_ROLE }}
      
      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 655438670330.dkr.ecr.us-east-1.amazonaws.com
      
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: 655438670330.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.repository }}
          tags: |
            type=ref,event=branch
            type=sha,format=long
      
      - name: Build docker image
        run: |
          docker build `
          -t "655438670330.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.repository }}" `
          --build-arg GITHUB_TOKEN=${{ secrets.BUILD_GITHUB_TOKEN }} `
          --build-arg GITHUB_USERNAME=OrthoFi `
          --build-arg MYGET_API_KEY=${{ secrets.MYGET_API_KEY }} `
          --build-arg MYGET_USERNAME=${{ secrets.MYGET_USER }} `
          --build-arg RUNTIME_TAG=${{ inputs.dotnet-tag }} `
          -f ${{ inputs.dockerfile }} ${{ inputs.context }}
        shell: pwsh          

      - name: Tag docker image
        run: |
          $tags = "${{ steps.meta.outputs.tags }}".split()
          foreach ($tag in $tags) {
            if (!$tag) { continue }
            docker tag "655438670330.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.repository }}" "$tag"
          }
        shell: pwsh
      
      - name: Push docker image
        run: |
          docker push "655438670330.dkr.ecr.us-east-1.amazonaws.com/${{ inputs.repository }}" --all-tags
