name: Build Image
on:
  workflow_call:
    inputs:
      build-arm:
        description: Build an arm64 image in addition to x64 (cannot be set true if setting "windows-latest" in runs-on)
        required: false
        default: true
        type: boolean

      context:
        description: Docker Context
        required: true
        type: string

      dockerfile:
        description: Dockerfile location
        required: true
        type: string

      repository:
        description: ECR repository name
        required: true
        type: string
      
      runs-on:
        description: The what value to to use in the 'runs-on' parameter (e.g. ubuntu-latest, windows-latest), cannot use windows with "build-arm" set "true"
        default: ubuntu-latest
        required: false
        type: string

jobs:
  generate-matrix:
    name: Generate Job Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          echo "Determining hardware platforms for platform matrix values to pass to build-image job"
          MATRIX_JSON="{\"platform\": [\"x64\""
          if [[ "${{ inputs.build-arm }}" == "true" ]]; then
            MATRIX_JSON="${MATRIX_JSON},\"arm64\""
          fi
          MATRIX_JSON="${MATRIX_JSON}]}"
          echo Matrix for build-image job is $MATRIX_JSON
          echo "matrix=${MATRIX_JSON}" >> $GITHUB_OUTPUT

  build-image:
    name: Build Image
    needs: generate-matrix
    strategy:
      matrix: ${{fromJson(needs.generate-matrix.outputs.matrix)}}
    runs-on: ${{ matrix.platform == 'arm64' && fromJSON('["self-hosted", "linux", "arm64"]') || inputs.runs-on }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup docker credential configuration (windows only)
        if: runner.os == 'Windows'
        run: |
          $config = Get-Content -Raw -Path "${env:USERPROFILE}\.docker\config.json" | ConvertFrom-Json
          $config.PSObject.Properties.Remove('credsStore')
          $config | ConvertTo-Json -Depth 100 | Set-Content -Path "${env:USERPROFILE}\.docker\config.json"
        shell: pwsh

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.BUILD_AWS_ACCESS_KEY_ID }}
          aws-region: us-east-1
          aws-secret-access-key: ${{ secrets.BUILD_AWS_SECRET_ACCESS_KEY }}
          role-to-assume: ${{ secrets.BUILD_AWS_SHARED_SERVICES_ROLE }}

      - uses: aws-actions/amazon-ecr-login@v1
        id: ecr

      - uses: docker/metadata-action@v4
        id: meta
        with:
          images: ${{ steps.ecr.outputs.registry }}/${{ inputs.repository }}
          tags: |
            type=ref,event=branch,suffix=${{ matrix.platform == 'arm64' && '-arm' || '' }}
            type=sha,format=long,suffix=${{ matrix.platform == 'arm64' && '-arm' || '' }}

      - uses: docker/setup-buildx-action@v2
        if: runner.os == 'Linux'

      - uses: docker/build-push-action@v3
        if: runner.os == 'Linux'
        with:
          build-args: |
            GITHUB_TOKEN=${{ secrets.BUILD_GITHUB_TOKEN }}
            GITHUB_USERNAME=OrthoFi
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Build and docker image (windows only)
        if: runner.os == 'Windows'
        run: |
          docker build -t "${{ steps.ecr.outputs.registry }}/${{ inputs.repository }}" --build-arg GITHUB_TOKEN=${{ secrets.BUILD_GITHUB_TOKEN }} --build-arg GITHUB_USERNAME=OrthoFi -f ${{ inputs.dockerfile }} ${{ inputs.context }}

      - name: Tag docker image (windows only)
        if: runner.os == 'Windows'
        run: |
          $tags = "${{ steps.meta.outputs.tags }}".split()
          foreach ($tag in $tags) {
            docker tag "${{ steps.ecr.outputs.registry }}/${{ inputs.repository }}" $tag
          }
        shell: pwsh

      - name: Build and docker image (windows only)
        if: runner.os == 'Windows'
        run: |
          docker push ${{ steps.meta.outputs.tags }}